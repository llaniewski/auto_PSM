<?R 
	source("conf.R") 
	c_header();
	source("lib/feq.R")
	source("lib/boundary.R")
?>

/*
09.04.19 - d3q27 model for particle coupling.
	     
	Consolidated isothermal portion of J. McCullough's thermal LBM-DEM model with D. Wang's TRT collision operator and modified weighting function for the PSM (based on LBM-DEM coupling of Noble & Torczynski, 1998).

	Compile options include:
		- BGK or TRT collision (BGK is default, for TRT compile with _TRT)
		- non-equilibirium-bounce-back (_NEBB) or superposition (_SUP) solid collision operators

	Maintainers: Nathan Di Vaira di_vaira@hotmail.com / Lukasz Laniewski-Wollk l.laniewskiwollk@uq.edu.au
		
Code updates:
	06.11.19 - Moving walls added
	11.12.19 - PSM coverage and modified weighting functions corrected, now correct 2nd order convergence & improved viscosity dependence
	10.01.20 - TotalFluidVelocity globals added
	25.02.20 - Manual periodicity and FullParticleIterator removed to align with TCLB particle update
    20.05.20 - LLW: Modified to moment-based implementation; consolidated to single collision function with TRT option; corrected CalcF
    14.03.22 - omegaP removed as setting, replaced with Lambda (TRT magic parameter)
    28.11.22 - Kuang-Luo rheology added as a compile option
	
*/

#define PI 3.141592653589793

<?R
	f = PV(DensityAll$name[DensityAll$group=="f"])
	d = PV("d")
	u = PV("u",xyz)
	uP = PV("uP",xyz)
    uvec = PV("u.",xyz)
	a = PV("Accel", XYZ)
	sol = PV("sol")
    solB = PV("solB")
    localCoverage = PV("localCoverage")
    sol_factor = PV("sol_factor")
    uparticle = PV("p.cvel.",xyz)
    force = PV("force.",xyz)
    fparticle = PV("fparticle.",xyz)
	R = PV("R[",seq_len(nrow(U))-1,"]")
	M = MRT_polyMatrix(U)$mat
?>

CudaDeviceFunction real_t getP(){
    RunBoundaries();
	real_t rho = <?R C(sum(f)) ?>;
    return (rho-1.0)/3.0;
}

CudaDeviceFunction vector_t getU(){
    RunBoundaries();
	real_t d = <?R C(sum(f)) ?>;
	vector_t u;
    <?R C(uvec, f %*% U) ?>
    RunCollision();
    <?R C(uvec, (uvec + f %*% U)*0.5*d^{-1}) ?>
	return u;
}

CudaDeviceFunction vector_t getUP() {
    vector_t u;
    <?R C(uvec, uP) ?>
    return u;
}

CudaDeviceFunction real_t getSolid() { return sol; }

CudaDeviceFunction real_t getB() { return solB; }

CudaDeviceFunction void Run() {
    RunBoundaries();
    RunParticles();
    RunCollision();
}

CudaDeviceFunction void RunParticles() {
    <?R if (Options$singlekernel) { ?>
    CalcF();
    <?R } ?>
}

CudaDeviceFunction void RunBoundaries() {
    switch (NodeType & NODE_BOUNDARY) {
    <?R for (bc in rows(BC)) { ?>
        case NODE_<?%s bc$name ?>:
        <?%s bc$name ?>();
	    break;
    <?R } ?>
    }
}

CudaDeviceFunction void RunCollision() {
    if ((NodeType & NODE_COLLISION) == NODE_Wall) {
        BounceBack();
    } else if ((NodeType & NODE_COLLISION) != 0) {
        Collision();
    }
}

CudaDeviceFunction void BounceBack() {
    <?R FullBounceBack() ?>
}

<?R
	EQ = MRT_eq(U, PV("rho"), PV("J",xyz), ortogonal=FALSE);
    f_old = PV(DensityAll$name[DensityAll$group=="f"],"_old")
    f_fetch = PV(DensityAll$name[DensityAll$group=="f"],"(0,0,0)")
    b = Bounce(U)
    for (bc in rows(BC)) {
?>
CudaDeviceFunction void <?%s bc$name ?>() {
<?R
    if (bc$type %in% c("pressure","velocity")) {
        ZouHe(EQ, bc$direction, bc$sign, bc$type, group=f, P=PV("Pressure"), V=PV("Velocity",XYZ)[bc$direction])
    } else if (bc$type == "movingwall") {
        sel = U[,bc$direction]*bc$sign < 0
        Velocity = PV("Velocity",XYZ)
        Velocity[bc$direction] = 0
        EQ_V = MRT_eq(U, PV(1), Velocity, ortogonal=FALSE);
        f_bounce = (f_old - EQ_V$feq) + EQ_V$feq[b]
        cat("real_t",paste0(c_table_decl(ToC(f_old)[sel]),collapse=","),";\n")
        C(f_old[sel],f_fetch[sel])
        C(f[b][sel],f_bounce[sel])
        mwf = ToC(f_bounce[sel] %*% U[b,][sel,] - f_old[sel] %*% U[sel,])
        cat(paste0("AddToMovingWallForce",XYZ,"(",mwf,");\n"))
    } ?>
}
<?R 
    }
?>

<?R
	RL = R
	R[1] = d
	R[2:4] = u*d
	EQ   = MRT_eq(U, d, u*d, ortogonal=FALSE, mat=M);
    uh = u + a*0.5
	EQ_H   = MRT_eq(U, d, uh*d, ortogonal=FALSE, mat=M);
	EQ_P = MRT_eq(U, d, uP*d, ortogonal=FALSE, mat=M)
    u_post = solB*(2*uP-u) + (1-solB)*(u+a)
	EQ_post = MRT_eq(U, d, u_post*d, ortogonal=FALSE, mat=M)

    der.gvector = function(obj_) gapply(obj_, der)
    F = subst(
        der(EQ$feq),
        d_d=0,
        ux_d=a[1],uy_d=a[2],uz_d=a[3],
        ux=uh[1],uy=uh[2],uz=uh[3]
    )

    bounce = Bounce(U)
	B = solve(M, M[bounce,]) # Bounce-back matrix

	omegaF1 = PV(c("omegaF1"))
	omegaP1 = PV(c("omegaP1"))
    omega = V(1.0 - omegaF1,1.0 - omegaP1)[EQ$order %% 2 + 1]

    collisions = list()
    collisions[["NONE"]] = R + omega*(EQ_H$Req - R)
    RomegaS =  R %*% B - R + EQ_P$Req - EQ_H$Req %*% B #Non-eq bounceback operator
    collisions[["NEBB"]] = R + (1.0-solB)*(omega*(EQ_H$Req - R) + (1.0 - omega*0.5)*(F %*% M)) + solB*RomegaS
    RomegaS =  EQ_P$Req - R + (1.0 - omega)*(R - EQ_H$Req) #Superposition operator
    collisions[["SUP"]] = R + (1.0-solB)*(omega*(EQ_H$Req - R) + (1.0 - omega*0.5)*(F %*% M)) + solB*RomegaS
    collisions[["EDM"]] = (1-omega)*(R - EQ$Req) + EQ_post$Req
    RomegaS =  R %*% B - R + EQ_P$Req - EQ_P$Req %*% B #Moving wall bounceback operator
    collisions[["MWBB"]] = R + (1.0-solB)*(omega*(EQ_H$Req - R) + (1.0 - omega*0.5)*(F %*% M)) + solB*RomegaS
?>

template <class T>
CudaDeviceFunction real_t CalcCoverage(const T& p) {
    real_t dist = sqrt(p.diff.x*p.diff.x + p.diff.y*p.diff.y + p.diff.z*p.diff.z);
    real_t localCoverage = (p.rad -  0.084/p.rad + 0.5 - dist);
    if (localCoverage > 1.0) return 1.0;
    if (localCoverage < 0.0) return 0.0;
    return localCoverage;
}

CudaDeviceFunction void CalcF() {
    real_t ux, uy, uz, d;
    <?R
        C( d, sum(f) )
        C( u, f %*% U * d^{-1} )
        C( uP, 0)
        C( sol, 0)
    ?>
	for (auto p : ParticleIterator(X,Y,Z)) {
        real_t localCoverage = CalcCoverage(p);
        if (localCoverage > 0) {
            sol = sol + localCoverage;
            <?R C(uP, uP + uparticle*localCoverage) ?>
        }
    }

	real_t sol_factor = 1.0;
    if (sol > 1.0e-8) sol_factor = 1.0/sol;
    <?R C(uP, uP * sol_factor) ?>
    
    if (sol > 1.0) sol = 1.0;

    switch (NodeType & NODE_TRANSFER) {
    case NODE_None:
        solB = sol;
        break;
    case NODE_TN:
        solB = sol*3*nu / (1 - sol + 3*nu);
        break;
    case NODE_LLW:
   		real_t vf = sol;
		real_t khat = nu*vf*(3-2*vf)/(2.0*(1-vf)*(1-vf) + nu*vf*(3-2*vf));
		solB = khat;
        break;
    }
    
    vector_t force;

    real_t omegaF = 1.0/(3.0*nu+0.5);
    real_t omegaF1 = 1.0 - omegaF;
    real_t omegaP1 = omegaF1;

    switch (NodeType & NODE_COLLISION) {
    case NODE_TRT:
        real_t omegaP = 1.0/(Lambda/(1.0/omegaF1-0.5)+0.5);
        omegaP1 = 1.0 - omegaP;
        break;
    }

    switch (NodeType & NODE_FORCING) {
    <?R for (n in names(collisions)) { ?>
    case NODE_<?%s n ?>: { <?R
        mom1 = collisions[[n]][2:4]
        mom1 = subst(mom1, solB=0) - mom1
        mom1 = mom1 * d^{-1}
        C(force, mom1); ?> } break;
    <?R } ?>
    }
    
	for (auto p : SyncParticleIterator(X,Y,Z)) {
        real_t localCoverage = CalcCoverage(p);
        if (localCoverage > 0) {
            vector_t fparticle;
            <?R C(fparticle, force * localCoverage * sol_factor) ?>
            p.applyForce(fparticle);
        }
    }
}

CudaDeviceFunction void Collision() {
	real_t ux, uy, uz, d, R[27];
    <?R
        C( RL, f %*% M)
        C( d, RL[1])
        C( u, RL[2:4]*d^{-1})
    ?>
    AddToTotalFluidMomentumX(d*ux);
    AddToTotalFluidMomentumY(d*uy);
    AddToTotalFluidMomentumZ(d*uz);
    AddToTotalFluidMass(d);
    AddToTotalFluidVolume(1);

    real_t omegaF = 1.0/(3.0*nu+0.5);
    real_t omegaF1 = 1.0 - omegaF;
    real_t omegaP1 = omegaF1;

    switch (NodeType & NODE_COLLISION) {
    case NODE_TRT:
        real_t omegaP = 1.0/(Lambda/(1.0/omegaF1-0.5)+0.5);
        omegaP1 = 1.0 - omegaP;
        break;
    }

    switch (NodeType & NODE_FORCING) {
    <?R for (n in names(collisions)) { ?>
    case NODE_<?%s n ?>: { <?R C(RL, collisions[[n]]); ?> } break;
    <?R } ?>
    }
    <?R	C( f, RL %*% solve(M)) ?>
}

CudaDeviceFunction void Init() {
	real_t d,ux,uy,uz;
    d = 1.0 + 3.0*Pressure;
	ux = VelocityX;
    uy = VelocityY;
    uz = VelocityZ;
    <?R
        C( uP, 0)
        C( sol, 0)
    ?>
	for (auto p : ParticleIterator(X,Y,Z)) {
        real_t localCoverage = CalcCoverage(p);
        if (localCoverage > 0) {
            sol = sol + localCoverage;
            <?R C(uP, uP + uparticle*localCoverage) ?>
        }
    }
	real_t sol_factor = 1.0;
    if (sol > 1.0e-8) sol_factor = 1.0/sol;
    <?R
        C(uP, uP * sol_factor)
        C(u, u + (uP - u)*sol)
        EQ = MRT_eq(U, d, d*u, ortogonal=FALSE);
        C(f, EQ$feq)
    ?>
    CalcF();
    RunCollision();
}


CudaDeviceFunction float2 Color() {
    float2 ret;
    vector_t u = getU();
    ret.x = sqrt(u.x*u.x + u.y*u.y + u.z*u.z);
    ret.y = 1.0 - sol;
    return ret;
}
